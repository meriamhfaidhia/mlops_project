pipeline {
    agent any

    environment {
        PROJECT_DIR = '/home/meriam/meriam-hfaidhia-4DS4-mlops_project'
        MODEL_PATH = "${PROJECT_DIR}/prediction_model.joblib"
        REPORT_PATH="${PROJECT_DIR}/performance_report.md"
        MLFLOW_URL = 'http://127.0.0.1:5000'
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "üîÑ Installation des d√©pendances..."
                    sh """
                    set -e
                    cd ${env.PROJECT_DIR}
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requierements.txt
                    sudo apt-get update
                    sudo apt-get install -y jq
                    sudo chown -R jenkins:jenkins ${env.PROJECT_DIR}
                    """
                }
            }
        }
        stage('Data Preprocessing') {
            steps {
                script {
                    echo "üìä Pr√©paration des donn√©es..."
                    sh """
                    cd ${env.PROJECT_DIR}
                    . venv/bin/activate
                    python main.py --prepare --train_path churn-bigml-80.csv --test_path churn-bigml-20.csv
                    """
                }
            }
        }

    
        stage('Code Linting') {
            steps {
                script {
                    echo "üîç V√©rification du style de code avec Flake8..."
                    sh """
                        set -e
                        cd ${env.PROJECT_DIR}
                        . venv/bin/activate
                        flake8 main.py model_pipeline.py --count --show-source --statistics
                    """
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo "üß™ Ex√©cution des tests unitaires..."
                    sh """
                        set -e
                        cd ${env.PROJECT_DIR}
                        . venv/bin/activate
                        pytest tests/ --maxfail=1 --disable-warnings -q 
                    """
                }
            }
        }
stage('Train Model') {
    steps {
        script {
            echo "üöÄ Entra√Ænement du mod√®le..."

            // V√©rification si MongoDB est d√©marr√© et d√©marrer si n√©cessaire
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                . venv/bin/activate
                
                # V√©rification si MongoDB est en cours d'ex√©cution
                if ! docker ps -q -f name=mongodb_official; then
                    echo "MongoDB n'est pas en cours d'ex√©cution. Tentative de d√©marrage..."
                    if ! docker ps -a -q -f name=mongodb_official; then
                        # MongoDB n'existe pas, cr√©ation du conteneur
                        echo "Cr√©ation du conteneur MongoDB..."
                        docker run --name mongodb_official -d -p 27017:27017 mongo || echo "√âchec de la cr√©ation du conteneur MongoDB"
                    else
                        # MongoDB est arr√™t√©, d√©marrage du conteneur
                        echo "D√©marrage du conteneur MongoDB..."
                        docker start mongodb_official || echo "√âchec du d√©marrage de MongoDB"
                    fi
                else
                    echo "‚úÖ MongoDB est d√©j√† en cours d'ex√©cution."
                fi
            """

            // Attendre que MongoDB soit pr√™t
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                . venv/bin/activate

                # Attendre que MongoDB soit pr√™t
                echo "‚è≥ Attente que MongoDB soit pr√™t..."
                until docker exec mongodb_official mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
                    sleep 1
                done
                echo "‚úÖ MongoDB est pr√™t."
            """

            // Activation de l'environnement virtuel et ex√©cution du script Python
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                . venv/bin/activate
                python3 main.py --train --train_path "train_data_prepared.csv" --test_path "test_data_prepared.csv"
            """
        }
    }
}

        stage('Fetch Logs from Elasticsearch') {
    steps {
        script {
            echo "üîç R√©cup√©ration des logs depuis Elasticsearch..."
            
            // Effectuer une requ√™te GET vers Elasticsearch pour r√©cup√©rer les logs
            def response = sh(script: """
                curl -X GET "http://localhost:9200/mlflow-metrics/_search?pretty" -H 'Content-Type: application/json'
            """, returnStdout: true).trim()
            
            // Afficher la r√©ponse dans la console de Jenkins
            echo "R√©ponse Elasticsearch: ${response}"
        }
    }
}

        stage('Evaluate Model') {
            steps {
                script {
                    echo "üìä √âvaluation du mod√®le..."
                    sh """
                        set -e
                        cd ${env.PROJECT_DIR}
                        . venv/bin/activate
                        python main.py --evaluate --train_path train_data_prepared.csv --test_path test_data_prepared.csv --load prediction_model.joblib 
                    """
                }
            }
        }
        

        stage('Save Model') {
            steps {
                script {
                    echo "üíæ Sauvegarde du mod√®le..."
                    sh """
                        set -e
                        cd ${env.PROJECT_DIR}
                        . venv/bin/activate
                        python main.py --load prediction_model.joblib --save churn_model_backup.joblib --train_path train_data_prepared.csv --test_path test_data_prepared.csv
                    """
                }
            }
        }

stage('Start MLflow UI commande') {
            steps {
                script {
                    echo "üöÄ D√©marrage du serveur MLflow..."
                    sh """
                        set -e
                        cd ${env.PROJECT_DIR}
                        . venv/bin/activate
                        nohup mlflow ui --backend-store-uri sqlite:///mlflow.db --default-artifact-root mongodb://localhost:27017/mlflow_artifacts > ${env.PROJECT_DIR}/mlflow.log 2>&1 &
                    """
                    echo "‚úÖ MLflow UI a d√©marr√© avec succ√®s !"
                    echo "Acc√©dez √† l'interface MLflow √† l'adresse : ${env.MLFLOW_URL}"
                    sleep 10
                }
            }
        }
    stage('Start MLflow UI docker conteneur') {
    steps {
        script {
            echo "üöÄ D√©marrage du serveur MLflow..."

            // Stop and remove existing container if it exists
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                docker ps -aq --filter name=mlflow_server | xargs -r docker stop
                docker ps -aq --filter name=mlflow_server | xargs -r docker rm
                docker run -d -p 5011:5000 --name mlflow_server \
                -v "${WORKSPACE}/mlflow.db:/mlflow.db" \
                -e MLFLOW_BACKEND_STORE_URI=sqlite:////mlflow.db \
                -e MLFLOW_DEFAULT_ARTIFACT_ROOT=mongodb://mongodb_official:27017/mlflow_artifacts \
                meriam-hfaidhia-4ds4-mlops_project-mlflow_server
            """
            echo "‚úÖ MLflow UI a d√©marr√© avec succ√®s !"
            echo "Acc√©dez √† l'interface MLflow √† l'adresse : ${env.MLFLOW_URL}"

            sleep 10
        }
    }
}


        stage('Promote Model') {
    steps {
        script {
            echo "üöÄ Promotion du mod√®le..."
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                . venv/bin/activate
                python main.py --promote Production --model_version 50
            """
        }
    }
}
     
  stage('Start FastAPI Application') {
    steps {
        script {
            echo "üöÄ D√©marrage de l'application FastAPI..."

            // Debug: Ensure the PROJECT_DIR is correct
            echo "PROJECT_DIR is: ${env.PROJECT_DIR}"

            sh """
                set -e
                cd ${env.PROJECT_DIR}
            """

            // Stop and remove existing containers if they exist
            sh """
                docker-compose -f ${env.PROJECT_DIR}/docker-compose-app.yml down || true
            """

            // Start the FastAPI application
            sh """
                docker-compose -f ${env.PROJECT_DIR}/docker-compose-app.yml up -d
            """

            // Wait for FastAPI to start
            sh """
                until curl -sSf http://localhost:8000/docs; do
                    echo "En attente du d√©marrage de l'application FastAPI..."
                    sleep 10
                done
            """

            // Check if FastAPI is running
            sh """
                if ! curl -sSf http://localhost:8000/docs; then
                    echo "‚ùå √âchec du d√©marrage de l'application FastAPI."
                    exit 1
                fi
            """

            echo "‚úÖ L'application FastAPI a d√©marr√© avec succ√®s !"
            echo "Acc√©dez √† l'API FastAPI √† l'adresse : http://localhost:8000/docs"

            // V√©rifier les pr√©dictions dans la base de donn√©es
            echo "üîç V√©rification des pr√©dictions dans la base de donn√©es..."

            sh """
                docker-compose -f ${env.PROJECT_DIR}/docker-compose-app.yml exec db psql -U postgres -d mlops_db -c "SELECT * FROM predictions;"
            """

            echo "‚úÖ V√©rification des pr√©dictions termin√©e."
        }
    }
}


        stage('Deploy API commande normale') {
            steps {
                script {
                    echo "üöÄ Lancement de l'API FastAPI..."
                    sh "bash ${env.PROJECT_DIR}/start_api.sh" 
                    sleep 30
                }
            }
        }
        stage('Deploy Flask API') {
            steps {
                script {
                    echo "üöÄ Lancement de l'API Flask..."
                    sh """
                        set -e
                        cd ${env.PROJECT_DIR}
                        . venv/bin/activate
                        nohup python FlaskApp.py &
                    """
                     sleep 30
                }
            }
        }
        stage('Test Flask API Deployment') {
            steps {
                script {
                    echo "‚úîÔ∏è Test de d√©ploiement de l'API Flask..."
                    sh """
                        set -e
                        curl --retry 10 --retry-delay 5 --fail http://192.168.93.6:5001/
                    """
                }
            }
        }


        stage('Test API') {
            steps {
                script {
                    echo "‚úîÔ∏è Test de l'API via Swagger..."
                    sh """
                        set -e
                        curl --retry 10 --retry-delay 5 --fail http://192.168.93.6:8000/docs 
                    """
                }
            }
        }

       stage('Test Prediction') {
    steps {
        script {
            echo "‚úîÔ∏è Test de la pr√©diction via l'API FastAPI..."
            def response = sh(script: """
                set -e
                curl --request POST \
                --url http://192.168.93.6:8000/predict/ \
                --header 'Content-Type: application/json' \
                --data '{
                    "features": [1, 2, 3, 4, 5, 6, 1, 13, 11, 10, 2, 0, 1]
                }' 
            """, returnStdout: true).trim()

            // Utiliser jq pour parser la r√©ponse et obtenir la pr√©diction
            def prediction = sh(script: "echo '${response}' | jq '.prediction'", returnStdout: true).trim()
            
            // Afficher le r√©sultat en fonction de la pr√©diction
            if (prediction == "1") {
                echo "‚úÖ Pr√©diction : Churn"
            } else if (prediction == "0") {
                echo "‚úÖ Pr√©diction : Not Churn"
            } else {
                echo "‚ùå Erreur : Pr√©diction non valide"
            }
        }
    }
}
  stage('Test Prediction for FlaskApp') {
    steps {
        script {
            echo "‚úîÔ∏è Test de la pr√©diction via l'API Flask..."
            def response = sh(script: """
                set -e
                curl --request POST \
                --url http://192.168.93.6:5001/predict \
                --data 'account_length=100&number_vmail_messages=5&total_day_calls=150&total_day_charge=55.5&total_eve_calls=200&total_eve_charge=30.7&total_night_calls=300&total_night_charge=45.2&total_intl_calls=30&total_intl_charge=15.6&customer_service_calls=3&international_plan=1&voice_mail_plan=1' \
                --silent
            """, returnStdout: true).trim()

            // Extraire le r√©sultat du HTML
            def predictionMatch = response =~ /<p>Le r√©sultat de la pr√©diction est : <strong>(.*?)<\/strong><\/p>/
            if (predictionMatch.find()) {
                def prediction = predictionMatch[0][1]
                echo "‚úÖ Pr√©diction : ${prediction}"
            } else {
                echo "‚ùå Erreur : Impossible d'extraire la pr√©diction"
            }
        }
    }
}


        stage('Retrain Model') {
            steps {
                script {
                    echo "üîÑ R√©entra√Ænement du mod√®le..."
                    sh """
                        set -e
                        curl --request POST \
                        --url http://192.168.93.6:8000/retrain/ \
                        --header 'Content-Type: application/json' \
                        --data '{
                            "n_estimators": 100,
                            "max_depth": 10,
                            "min_samples_split": 2,
                            "train_path": "churn-bigml-20.csv",
                            "test_path": "churn-bigml-80.csv"
                        }' 
                    """
                }
            }
        }
        
        stage('Generate Model Card') {
    steps {
        script {
            echo "üìÑ G√©n√©ration de la fiche de mod√®le..."
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                . venv/bin/activate
                python3 generate_model_card.py --model_path ${env.MODEL_PATH} --output_path ${env.PROJECT_DIR}/model_card.md --test_path test_data_prepared.csv
            """
        }
    }
}
stage('Generate Performance Report') {
    steps {
        script {
            echo "üìä G√©n√©ration du rapport de performance..."
            sh """
                set -e
                cd ${env.PROJECT_DIR}
                . venv/bin/activate
                python3 generate_performance_report.py --model_path ${env.MODEL_PATH} --output_path ${env.REPORT_PATH} --test_path test_data_prepared.csv
            """
        }
    }
}

     
    }

 post {
    always {
        echo "üîß Nettoyage ou actions post-ex√©cution"
        sh "rm -rf ${env.PROJECT_DIR}/venv"

        // Copier les fichiers dans le workspace
        sh "cp ${env.PROJECT_DIR}/model_card.md ."
        sh "cp ${env.PROJECT_DIR}/performance_report.md ."
        sh "cp ${env.PROJECT_DIR}/performance_report.md_confusion_matrix.png ."

        // V√©rifier l'existence des fichiers dans le workspace
        sh "ls -l"

        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
            def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """<html>
            <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                    <h2>${jobName} Build ${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                </div>
            </body>
            </html>"""

            // Utiliser un pattern GLOB valide
            emailext(
                subject: "${jobName} Build ${buildNumber} ${pipelineStatus}",
                body: body,
                to: 'meriamhfaidhia@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: "model_card.md, performance_report.md,performance_report.md_confusion_matrix.png", // Utiliser un pattern GLOB valide
            )
        }
    }

        success {
            echo "‚úÖ Pipeline ex√©cut√© avec succ√®s!"
        }

        failure {
            echo "‚ùå Pipeline √©chou√©."
        }
    }
}